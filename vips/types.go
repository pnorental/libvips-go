// Code generated by github.com/cshum/vipsgen from libvips 8.16.1; DO NOT EDIT.

package vips

// #include <vips/vips.h>
import "C"
import (
	"strings"
	"unsafe"
)

// ImageType represents an image type
type ImageType string

// ImageType enum
const (
	ImageTypeUnknown ImageType = "unknown"
	ImageTypeJpeg ImageType = "jpeg"
	ImageTypeGif ImageType = "gif"
	ImageTypePng ImageType = "png"
	ImageTypeWebp ImageType = "webp"
	ImageTypeHeif ImageType = "heif"
	ImageTypeSvg ImageType = "svg"
	ImageTypeTiff ImageType = "tiff"
	ImageTypeJp2k ImageType = "jp2k"
	ImageTypeAvif ImageType = "avif"
	ImageTypePdf ImageType = "pdf"
	ImageTypeBmp ImageType = "bmp"
	ImageTypeMagick ImageType = "magick"
	ImageTypeAnalyze ImageType = "analyze"
	ImageTypeCsv ImageType = "csv"
	ImageTypeMatrix ImageType = "matrix"
	ImageTypePpm ImageType = "ppm"
	ImageTypeRad ImageType = "rad"
	ImageTypeRaw ImageType = "raw"
	ImageTypeVips ImageType = "vips"
)


// Access represents VipsAccess type
type Access int

// Access enum
const (
	AccessRandom Access = C.VIPS_ACCESS_RANDOM
	AccessSequential Access = C.VIPS_ACCESS_SEQUENTIAL
	AccessSequentialUnbuffered Access = C.VIPS_ACCESS_SEQUENTIAL_UNBUFFERED
	AccessLast Access = C.VIPS_ACCESS_LAST
)

// Align represents VipsAlign type
type Align int

// Align enum
const (
	AlignLow Align = C.VIPS_ALIGN_LOW
	AlignCentre Align = C.VIPS_ALIGN_CENTRE
	AlignHigh Align = C.VIPS_ALIGN_HIGH
	AlignLast Align = C.VIPS_ALIGN_LAST
)

// Angle represents VipsAngle type
type Angle int

// Angle enum
const (
	AngleD0 Angle = C.VIPS_ANGLE_D0
	AngleD90 Angle = C.VIPS_ANGLE_D90
	AngleD180 Angle = C.VIPS_ANGLE_D180
	AngleD270 Angle = C.VIPS_ANGLE_D270
	AngleLast Angle = C.VIPS_ANGLE_LAST
)

// Angle45 represents VipsAngle45 type
type Angle45 int

// Angle45 enum
const (
	Angle45D0 Angle45 = C.VIPS_ANGLE45_D0
	Angle45D45 Angle45 = C.VIPS_ANGLE45_D45
	Angle45D90 Angle45 = C.VIPS_ANGLE45_D90
	Angle45D135 Angle45 = C.VIPS_ANGLE45_D135
	Angle45D180 Angle45 = C.VIPS_ANGLE45_D180
	Angle45D225 Angle45 = C.VIPS_ANGLE45_D225
	Angle45D270 Angle45 = C.VIPS_ANGLE45_D270
	Angle45D315 Angle45 = C.VIPS_ANGLE45_D315
	Angle45Last Angle45 = C.VIPS_ANGLE45_LAST
)

// BandFormat represents VipsBandFormat type
type BandFormat int

// BandFormat enum
const (
	BandFormatNotset BandFormat = C.VIPS_FORMAT_NOTSET
	BandFormatUchar BandFormat = C.VIPS_FORMAT_UCHAR
	BandFormatChar BandFormat = C.VIPS_FORMAT_CHAR
	BandFormatUshort BandFormat = C.VIPS_FORMAT_USHORT
	BandFormatShort BandFormat = C.VIPS_FORMAT_SHORT
	BandFormatUint BandFormat = C.VIPS_FORMAT_UINT
	BandFormatInt BandFormat = C.VIPS_FORMAT_INT
	BandFormatFloat BandFormat = C.VIPS_FORMAT_FLOAT
	BandFormatComplex BandFormat = C.VIPS_FORMAT_COMPLEX
	BandFormatDouble BandFormat = C.VIPS_FORMAT_DOUBLE
	BandFormatDpcomplex BandFormat = C.VIPS_FORMAT_DPCOMPLEX
	BandFormatLast BandFormat = C.VIPS_FORMAT_LAST
)

// BlendMode represents VipsBlendMode type
type BlendMode int

// BlendMode enum
const (
	BlendModeClear BlendMode = C.VIPS_BLEND_MODE_CLEAR
	BlendModeSource BlendMode = C.VIPS_BLEND_MODE_SOURCE
	BlendModeOver BlendMode = C.VIPS_BLEND_MODE_OVER
	BlendModeIn BlendMode = C.VIPS_BLEND_MODE_IN
	BlendModeOut BlendMode = C.VIPS_BLEND_MODE_OUT
	BlendModeAtop BlendMode = C.VIPS_BLEND_MODE_ATOP
	BlendModeDest BlendMode = C.VIPS_BLEND_MODE_DEST
	BlendModeDestOver BlendMode = C.VIPS_BLEND_MODE_DEST_OVER
	BlendModeDestIn BlendMode = C.VIPS_BLEND_MODE_DEST_IN
	BlendModeDestOut BlendMode = C.VIPS_BLEND_MODE_DEST_OUT
	BlendModeDestAtop BlendMode = C.VIPS_BLEND_MODE_DEST_ATOP
	BlendModeXor BlendMode = C.VIPS_BLEND_MODE_XOR
	BlendModeAdd BlendMode = C.VIPS_BLEND_MODE_ADD
	BlendModeSaturate BlendMode = C.VIPS_BLEND_MODE_SATURATE
	BlendModeMultiply BlendMode = C.VIPS_BLEND_MODE_MULTIPLY
	BlendModeScreen BlendMode = C.VIPS_BLEND_MODE_SCREEN
	BlendModeOverlay BlendMode = C.VIPS_BLEND_MODE_OVERLAY
	BlendModeDarken BlendMode = C.VIPS_BLEND_MODE_DARKEN
	BlendModeLighten BlendMode = C.VIPS_BLEND_MODE_LIGHTEN
	BlendModeColourDodge BlendMode = C.VIPS_BLEND_MODE_COLOUR_DODGE
	BlendModeColourBurn BlendMode = C.VIPS_BLEND_MODE_COLOUR_BURN
	BlendModeHardLight BlendMode = C.VIPS_BLEND_MODE_HARD_LIGHT
	BlendModeSoftLight BlendMode = C.VIPS_BLEND_MODE_SOFT_LIGHT
	BlendModeDifference BlendMode = C.VIPS_BLEND_MODE_DIFFERENCE
	BlendModeExclusion BlendMode = C.VIPS_BLEND_MODE_EXCLUSION
	BlendModeLast BlendMode = C.VIPS_BLEND_MODE_LAST
)

// Coding represents VipsCoding type
type Coding int

// Coding enum
const (
	CodingError Coding = C.VIPS_CODING_ERROR
	CodingNone Coding = C.VIPS_CODING_NONE
	CodingLabq Coding = C.VIPS_CODING_LABQ
	CodingRad Coding = C.VIPS_CODING_RAD
	CodingLast Coding = C.VIPS_CODING_LAST
)

// Combine represents VipsCombine type
type Combine int

// Combine enum
const (
	CombineMax Combine = C.VIPS_COMBINE_MAX
	CombineSum Combine = C.VIPS_COMBINE_SUM
	CombineMin Combine = C.VIPS_COMBINE_MIN
	CombineLast Combine = C.VIPS_COMBINE_LAST
)

// CombineMode represents VipsCombineMode type
type CombineMode int

// CombineMode enum
const (
	CombineModeSet CombineMode = C.VIPS_COMBINE_MODE_SET
	CombineModeAdd CombineMode = C.VIPS_COMBINE_MODE_ADD
	CombineModeLast CombineMode = C.VIPS_COMBINE_MODE_LAST
)

// CompassDirection represents VipsCompassDirection type
type CompassDirection int

// CompassDirection enum
const (
	CompassDirectionCentre CompassDirection = C.VIPS_COMPASS_DIRECTION_CENTRE
	CompassDirectionNorth CompassDirection = C.VIPS_COMPASS_DIRECTION_NORTH
	CompassDirectionEast CompassDirection = C.VIPS_COMPASS_DIRECTION_EAST
	CompassDirectionSouth CompassDirection = C.VIPS_COMPASS_DIRECTION_SOUTH
	CompassDirectionWest CompassDirection = C.VIPS_COMPASS_DIRECTION_WEST
	CompassDirectionNorthEast CompassDirection = C.VIPS_COMPASS_DIRECTION_NORTH_EAST
	CompassDirectionSouthEast CompassDirection = C.VIPS_COMPASS_DIRECTION_SOUTH_EAST
	CompassDirectionSouthWest CompassDirection = C.VIPS_COMPASS_DIRECTION_SOUTH_WEST
	CompassDirectionNorthWest CompassDirection = C.VIPS_COMPASS_DIRECTION_NORTH_WEST
	CompassDirectionLast CompassDirection = C.VIPS_COMPASS_DIRECTION_LAST
)

// Direction represents VipsDirection type
type Direction int

// Direction enum
const (
	DirectionHorizontal Direction = C.VIPS_DIRECTION_HORIZONTAL
	DirectionVertical Direction = C.VIPS_DIRECTION_VERTICAL
	DirectionLast Direction = C.VIPS_DIRECTION_LAST
)

// Extend represents VipsExtend type
type Extend int

// Extend enum
const (
	ExtendBlack Extend = C.VIPS_EXTEND_BLACK
	ExtendCopy Extend = C.VIPS_EXTEND_COPY
	ExtendRepeat Extend = C.VIPS_EXTEND_REPEAT
	ExtendMirror Extend = C.VIPS_EXTEND_MIRROR
	ExtendWhite Extend = C.VIPS_EXTEND_WHITE
	ExtendBackground Extend = C.VIPS_EXTEND_BACKGROUND
	ExtendLast Extend = C.VIPS_EXTEND_LAST
)

// FailOn represents VipsFailOn type
type FailOn int

// FailOn enum
const (
	FailOnNone FailOn = C.VIPS_FAIL_ON_NONE
	FailOnTruncated FailOn = C.VIPS_FAIL_ON_TRUNCATED
	FailOnError FailOn = C.VIPS_FAIL_ON_ERROR
	FailOnWarning FailOn = C.VIPS_FAIL_ON_WARNING
	FailOnLast FailOn = C.VIPS_FAIL_ON_LAST
)

// Flags represents VipsForeignFlags type
type Flags int

// Flags enum
const (
	FlagsNone Flags = C.VIPS_FOREIGN_NONE
	FlagsPartial Flags = C.VIPS_FOREIGN_PARTIAL
	FlagsBigendian Flags = C.VIPS_FOREIGN_BIGENDIAN
	FlagsSequential Flags = C.VIPS_FOREIGN_SEQUENTIAL
	FlagsAll Flags = C.VIPS_FOREIGN_ALL
)

// Keep represents VipsForeignKeep type
type Keep int

// Keep enum
const (
	KeepNone Keep = C.VIPS_FOREIGN_KEEP_NONE
	KeepExif Keep = C.VIPS_FOREIGN_KEEP_EXIF
	KeepXmp Keep = C.VIPS_FOREIGN_KEEP_XMP
	KeepIptc Keep = C.VIPS_FOREIGN_KEEP_IPTC
	KeepIcc Keep = C.VIPS_FOREIGN_KEEP_ICC
	KeepOther Keep = C.VIPS_FOREIGN_KEEP_OTHER
	KeepAll Keep = C.VIPS_FOREIGN_KEEP_ALL
)

// PngFilter represents VipsForeignPngFilter type
type PngFilter int

// PngFilter enum
const (
	PngFilterNone PngFilter = C.VIPS_FOREIGN_PNG_FILTER_NONE
	PngFilterSub PngFilter = C.VIPS_FOREIGN_PNG_FILTER_SUB
	PngFilterUp PngFilter = C.VIPS_FOREIGN_PNG_FILTER_UP
	PngFilterAvg PngFilter = C.VIPS_FOREIGN_PNG_FILTER_AVG
	PngFilterPaeth PngFilter = C.VIPS_FOREIGN_PNG_FILTER_PAETH
	PngFilterAll PngFilter = C.VIPS_FOREIGN_PNG_FILTER_ALL
)

// PpmFormat represents VipsForeignPpmFormat type
type PpmFormat int

// PpmFormat enum
const (
	PpmFormatPbm PpmFormat = C.VIPS_FOREIGN_PPM_FORMAT_PBM
	PpmFormatPgm PpmFormat = C.VIPS_FOREIGN_PPM_FORMAT_PGM
	PpmFormatPpm PpmFormat = C.VIPS_FOREIGN_PPM_FORMAT_PPM
	PpmFormatPfm PpmFormat = C.VIPS_FOREIGN_PPM_FORMAT_PFM
	PpmFormatPnm PpmFormat = C.VIPS_FOREIGN_PPM_FORMAT_PNM
	PpmFormatLast PpmFormat = C.VIPS_FOREIGN_PPM_FORMAT_LAST
)

// Subsample represents VipsForeignSubsample type
type Subsample int

// Subsample enum
const (
	SubsampleAuto Subsample = C.VIPS_FOREIGN_SUBSAMPLE_AUTO
	SubsampleOn Subsample = C.VIPS_FOREIGN_SUBSAMPLE_ON
	SubsampleOff Subsample = C.VIPS_FOREIGN_SUBSAMPLE_OFF
	SubsampleLast Subsample = C.VIPS_FOREIGN_SUBSAMPLE_LAST
)

// WebpPreset represents VipsForeignWebpPreset type
type WebpPreset int

// WebpPreset enum
const (
	WebpPresetDefault WebpPreset = C.VIPS_FOREIGN_WEBP_PRESET_DEFAULT
	WebpPresetPicture WebpPreset = C.VIPS_FOREIGN_WEBP_PRESET_PICTURE
	WebpPresetPhoto WebpPreset = C.VIPS_FOREIGN_WEBP_PRESET_PHOTO
	WebpPresetDrawing WebpPreset = C.VIPS_FOREIGN_WEBP_PRESET_DRAWING
	WebpPresetIcon WebpPreset = C.VIPS_FOREIGN_WEBP_PRESET_ICON
	WebpPresetText WebpPreset = C.VIPS_FOREIGN_WEBP_PRESET_TEXT
	WebpPresetLast WebpPreset = C.VIPS_FOREIGN_WEBP_PRESET_LAST
)

// Intent represents VipsIntent type
type Intent int

// Intent enum
const (
	IntentPerceptual Intent = C.VIPS_INTENT_PERCEPTUAL
	IntentRelative Intent = C.VIPS_INTENT_RELATIVE
	IntentSaturation Intent = C.VIPS_INTENT_SATURATION
	IntentAbsolute Intent = C.VIPS_INTENT_ABSOLUTE
	IntentLast Intent = C.VIPS_INTENT_LAST
)

// Interesting represents VipsInteresting type
type Interesting int

// Interesting enum
const (
	InterestingNone Interesting = C.VIPS_INTERESTING_NONE
	InterestingCentre Interesting = C.VIPS_INTERESTING_CENTRE
	InterestingEntropy Interesting = C.VIPS_INTERESTING_ENTROPY
	InterestingAttention Interesting = C.VIPS_INTERESTING_ATTENTION
	InterestingLow Interesting = C.VIPS_INTERESTING_LOW
	InterestingHigh Interesting = C.VIPS_INTERESTING_HIGH
	InterestingAll Interesting = C.VIPS_INTERESTING_ALL
	InterestingLast Interesting = C.VIPS_INTERESTING_LAST
)

// Interpretation represents VipsInterpretation type
type Interpretation int

// Interpretation enum
const (
	InterpretationError Interpretation = C.VIPS_INTERPRETATION_ERROR
	InterpretationMultiband Interpretation = C.VIPS_INTERPRETATION_MULTIBAND
	InterpretationBW Interpretation = C.VIPS_INTERPRETATION_B_W
	InterpretationHistogram Interpretation = C.VIPS_INTERPRETATION_HISTOGRAM
	InterpretationXyz Interpretation = C.VIPS_INTERPRETATION_XYZ
	InterpretationLab Interpretation = C.VIPS_INTERPRETATION_LAB
	InterpretationCmyk Interpretation = C.VIPS_INTERPRETATION_CMYK
	InterpretationLabq Interpretation = C.VIPS_INTERPRETATION_LABQ
	InterpretationRgb Interpretation = C.VIPS_INTERPRETATION_RGB
	InterpretationCmc Interpretation = C.VIPS_INTERPRETATION_CMC
	InterpretationLch Interpretation = C.VIPS_INTERPRETATION_LCH
	InterpretationLabs Interpretation = C.VIPS_INTERPRETATION_LABS
	InterpretationSrgb Interpretation = C.VIPS_INTERPRETATION_sRGB
	InterpretationYxy Interpretation = C.VIPS_INTERPRETATION_YXY
	InterpretationFourier Interpretation = C.VIPS_INTERPRETATION_FOURIER
	InterpretationRgb16 Interpretation = C.VIPS_INTERPRETATION_RGB16
	InterpretationGrey16 Interpretation = C.VIPS_INTERPRETATION_GREY16
	InterpretationMatrix Interpretation = C.VIPS_INTERPRETATION_MATRIX
	InterpretationScrgb Interpretation = C.VIPS_INTERPRETATION_scRGB
	InterpretationHsv Interpretation = C.VIPS_INTERPRETATION_HSV
	InterpretationLast Interpretation = C.VIPS_INTERPRETATION_LAST
)

// Kernel represents VipsKernel type
type Kernel int

// Kernel enum
const (
	KernelNearest Kernel = C.VIPS_KERNEL_NEAREST
	KernelLinear Kernel = C.VIPS_KERNEL_LINEAR
	KernelCubic Kernel = C.VIPS_KERNEL_CUBIC
	KernelMitchell Kernel = C.VIPS_KERNEL_MITCHELL
	KernelLanczos2 Kernel = C.VIPS_KERNEL_LANCZOS2
	KernelLanczos3 Kernel = C.VIPS_KERNEL_LANCZOS3
	KernelLast Kernel = C.VIPS_KERNEL_LAST
)

// OperationBoolean represents VipsOperationBoolean type
type OperationBoolean int

// OperationBoolean enum
const (
	OperationBooleanAnd OperationBoolean = C.VIPS_OPERATION_BOOLEAN_AND
	OperationBooleanOr OperationBoolean = C.VIPS_OPERATION_BOOLEAN_OR
	OperationBooleanEor OperationBoolean = C.VIPS_OPERATION_BOOLEAN_EOR
	OperationBooleanLshift OperationBoolean = C.VIPS_OPERATION_BOOLEAN_LSHIFT
	OperationBooleanRshift OperationBoolean = C.VIPS_OPERATION_BOOLEAN_RSHIFT
	OperationBooleanLast OperationBoolean = C.VIPS_OPERATION_BOOLEAN_LAST
)

// OperationComplex represents VipsOperationComplex type
type OperationComplex int

// OperationComplex enum
const (
	OperationComplexPolar OperationComplex = C.VIPS_OPERATION_COMPLEX_POLAR
	OperationComplexRect OperationComplex = C.VIPS_OPERATION_COMPLEX_RECT
	OperationComplexConj OperationComplex = C.VIPS_OPERATION_COMPLEX_CONJ
	OperationComplexLast OperationComplex = C.VIPS_OPERATION_COMPLEX_LAST
)

// OperationComplex2 represents VipsOperationComplex2 type
type OperationComplex2 int

// OperationComplex2 enum
const (
	OperationComplex2CrossPhase OperationComplex2 = C.VIPS_OPERATION_COMPLEX2_CROSS_PHASE
	OperationComplex2Last OperationComplex2 = C.VIPS_OPERATION_COMPLEX2_LAST
)

// OperationComplexget represents VipsOperationComplexget type
type OperationComplexget int

// OperationComplexget enum
const (
	OperationComplexgetReal OperationComplexget = C.VIPS_OPERATION_COMPLEXGET_REAL
	OperationComplexgetImag OperationComplexget = C.VIPS_OPERATION_COMPLEXGET_IMAG
	OperationComplexgetLast OperationComplexget = C.VIPS_OPERATION_COMPLEXGET_LAST
)

// OperationMath represents VipsOperationMath type
type OperationMath int

// OperationMath enum
const (
	OperationMathSin OperationMath = C.VIPS_OPERATION_MATH_SIN
	OperationMathCos OperationMath = C.VIPS_OPERATION_MATH_COS
	OperationMathTan OperationMath = C.VIPS_OPERATION_MATH_TAN
	OperationMathAsin OperationMath = C.VIPS_OPERATION_MATH_ASIN
	OperationMathAcos OperationMath = C.VIPS_OPERATION_MATH_ACOS
	OperationMathAtan OperationMath = C.VIPS_OPERATION_MATH_ATAN
	OperationMathLog OperationMath = C.VIPS_OPERATION_MATH_LOG
	OperationMathLog10 OperationMath = C.VIPS_OPERATION_MATH_LOG10
	OperationMathExp OperationMath = C.VIPS_OPERATION_MATH_EXP
	OperationMathExp10 OperationMath = C.VIPS_OPERATION_MATH_EXP10
	OperationMathSinh OperationMath = C.VIPS_OPERATION_MATH_SINH
	OperationMathCosh OperationMath = C.VIPS_OPERATION_MATH_COSH
	OperationMathTanh OperationMath = C.VIPS_OPERATION_MATH_TANH
	OperationMathAsinh OperationMath = C.VIPS_OPERATION_MATH_ASINH
	OperationMathAcosh OperationMath = C.VIPS_OPERATION_MATH_ACOSH
	OperationMathAtanh OperationMath = C.VIPS_OPERATION_MATH_ATANH
	OperationMathLast OperationMath = C.VIPS_OPERATION_MATH_LAST
)

// OperationMath2 represents VipsOperationMath2 type
type OperationMath2 int

// OperationMath2 enum
const (
	OperationMath2Pow OperationMath2 = C.VIPS_OPERATION_MATH2_POW
	OperationMath2Wop OperationMath2 = C.VIPS_OPERATION_MATH2_WOP
	OperationMath2Atan2 OperationMath2 = C.VIPS_OPERATION_MATH2_ATAN2
	OperationMath2Last OperationMath2 = C.VIPS_OPERATION_MATH2_LAST
)

// OperationMorphology represents VipsOperationMorphology type
type OperationMorphology int

// OperationMorphology enum
const (
	OperationMorphologyErode OperationMorphology = C.VIPS_OPERATION_MORPHOLOGY_ERODE
	OperationMorphologyDilate OperationMorphology = C.VIPS_OPERATION_MORPHOLOGY_DILATE
	OperationMorphologyLast OperationMorphology = C.VIPS_OPERATION_MORPHOLOGY_LAST
)

// OperationRelational represents VipsOperationRelational type
type OperationRelational int

// OperationRelational enum
const (
	OperationRelationalEqual OperationRelational = C.VIPS_OPERATION_RELATIONAL_EQUAL
	OperationRelationalNoteq OperationRelational = C.VIPS_OPERATION_RELATIONAL_NOTEQ
	OperationRelationalLess OperationRelational = C.VIPS_OPERATION_RELATIONAL_LESS
	OperationRelationalLesseq OperationRelational = C.VIPS_OPERATION_RELATIONAL_LESSEQ
	OperationRelationalMore OperationRelational = C.VIPS_OPERATION_RELATIONAL_MORE
	OperationRelationalMoreeq OperationRelational = C.VIPS_OPERATION_RELATIONAL_MOREEQ
	OperationRelationalLast OperationRelational = C.VIPS_OPERATION_RELATIONAL_LAST
)

// OperationRound represents VipsOperationRound type
type OperationRound int

// OperationRound enum
const (
	OperationRoundRint OperationRound = C.VIPS_OPERATION_ROUND_RINT
	OperationRoundCeil OperationRound = C.VIPS_OPERATION_ROUND_CEIL
	OperationRoundFloor OperationRound = C.VIPS_OPERATION_ROUND_FLOOR
	OperationRoundLast OperationRound = C.VIPS_OPERATION_ROUND_LAST
)

// Precision represents VipsPrecision type
type Precision int

// Precision enum
const (
	PrecisionInteger Precision = C.VIPS_PRECISION_INTEGER
	PrecisionFloat Precision = C.VIPS_PRECISION_FLOAT
	PrecisionApproximate Precision = C.VIPS_PRECISION_APPROXIMATE
	PrecisionLast Precision = C.VIPS_PRECISION_LAST
)

// SdfShape represents VipsSdfShape type
type SdfShape int

// SdfShape enum
const (
	SdfShapeCircle SdfShape = C.VIPS_SDF_SHAPE_CIRCLE
	SdfShapeBox SdfShape = C.VIPS_SDF_SHAPE_BOX
	SdfShapeRoundedBox SdfShape = C.VIPS_SDF_SHAPE_ROUNDED_BOX
	SdfShapeLine SdfShape = C.VIPS_SDF_SHAPE_LINE
	SdfShapeLast SdfShape = C.VIPS_SDF_SHAPE_LAST
)

// Size represents VipsSize type
type Size int

// Size enum
const (
	SizeBoth Size = C.VIPS_SIZE_BOTH
	SizeUp Size = C.VIPS_SIZE_UP
	SizeDown Size = C.VIPS_SIZE_DOWN
	SizeForce Size = C.VIPS_SIZE_FORCE
	SizeLast Size = C.VIPS_SIZE_LAST
)


// imageMimeTypes map the various image types to its mime type representation
var imageMimeTypes = map[ImageType]string{
	ImageTypeJpeg: "image/jpeg",
	ImageTypeGif: "image/gif",
	ImageTypePng: "image/png",
	ImageTypeWebp: "image/webp",
	ImageTypeHeif: "image/heif",
	ImageTypeSvg: "image/svg+xml",
	ImageTypeTiff: "image/tiff",
	ImageTypeJp2k: "image/jp2",
	ImageTypeAvif: "image/avif",
	ImageTypePdf: "application/pdf",
	ImageTypeBmp: "image/bmp",
	ImageTypeAnalyze: "application/x-analyze",
	ImageTypeCsv: "text/csv",
	ImageTypeMatrix: "application/x-matrix",
	ImageTypePpm: "image/x-portable-pixmap",
	ImageTypeRad: "image/rad",
	ImageTypeRaw: "image/raw",
	ImageTypeVips: "image/vnd.libvips",
}

// MimeType returns the MIME type for the image type.
func (imageType ImageType) MimeType() (mime string, ok bool) {
	mime, ok = imageMimeTypes[imageType]
	return
}

// vipsDetermineImageType determine the image type from loader metadata
func vipsDetermineImageType(in *C.VipsImage) ImageType {
	if in != nil {
		if vipsLoader, ok := vipsImageGetMetaLoader(in); ok {
			if strings.HasPrefix(vipsLoader, "jpeg") {
				return ImageTypeJpeg
			}
			if strings.HasPrefix(vipsLoader, "gif") {
				return ImageTypeGif
			}
			if strings.HasPrefix(vipsLoader, "png") {
				return ImageTypePng
			}
			if strings.HasPrefix(vipsLoader, "webp") {
				return ImageTypeWebp
			}
			if strings.HasPrefix(vipsLoader, "analyze") {
				return ImageTypeAnalyze
			}
			if strings.HasPrefix(vipsLoader, "csv") {
				return ImageTypeCsv
			}
			if strings.HasPrefix(vipsLoader, "matrix") {
				return ImageTypeMatrix
			}
			if strings.HasPrefix(vipsLoader, "ppm") {
				return ImageTypePpm
			}
			if strings.HasPrefix(vipsLoader, "rad") {
				return ImageTypeRad
			}
			if strings.HasPrefix(vipsLoader, "raw") {
				return ImageTypeRaw
			}
			if strings.HasPrefix(vipsLoader, "vips") {
				return ImageTypeVips
			}
			
		}
	}
	return ImageTypeUnknown
}

// Interpolate represents VipsInterpolate type
type Interpolate struct {
	interp *C.VipsInterpolate
}

// InterpolateType represents the type of interpolation to use
type InterpolateType string

// InterpolateType enum - these values match the predefined interpolators in libvips
const (
	InterpolateNearest  InterpolateType = "nearest"
	InterpolateBilinear InterpolateType = "bilinear"
	InterpolateBicubic  InterpolateType = "bicubic"
	InterpolateLbb      InterpolateType = "lbb"      // Lanczos3
	InterpolateNohalo   InterpolateType = "nohalo"
	InterpolateVsqbs    InterpolateType = "vsqbs"
)

// NewInterpolate creates a new Interpolate with the given name
// Valid names include: "nearest", "bilinear", "bicubic", "lbb", "nohalo", "vsqbs"
func NewInterpolate(name InterpolateType) *Interpolate {
	Startup(nil)
	cName := C.CString(string(name))
	defer C.free(unsafe.Pointer(cName))

	interp := C.vips_interpolate_new(cName)
	if interp == nil {
		// Default to bilinear if requested interpolator not found
		C.vips_error_clear()
		cDefault := C.CString("bilinear")
		defer C.free(unsafe.Pointer(cDefault))
		interp = C.vips_interpolate_new(cDefault)
	}
	return &Interpolate{interp: interp}
}

// Close frees the interpolator resources
func (i *Interpolate) Close() {
	if i != nil && i.interp != nil {
		C.g_object_unref(C.gpointer(i.interp))
		i.interp = nil
	}
}
